View(data_to_plot)
View(data_to_plot)
setwd(~/git/plotting-and-visualisation-templates/)
setwd("~/git/plotting-and-visualisation-templates/")
# Simple point and error bar plot of mean D-IRAP scores
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# notes:
#   No bars as these sublty but falsely imply that deviation from zero is interpretable or meaningful.
#   No lines between groups as these can subtly but falsy imply that the groups are paired.
# instructions:
#   Change your group names, mean D1 scores, and error bar width on lines 38, 40 and 41.
#   Or, put these in a csv file and load them here using lines 51-52. You can see the required structure on the preceeding lines.
#   Change your trial type names on line 92-95.
#   Depending on whether you're working from mac or pc, comment/comment lines 99/100.
# dependencies ------------------------------------------------------------
# check for all dependencies and install any missing ones
# solution from https://gist.github.com/stevenworthington/3178163
auto_install_dependencies <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
}
packages <- c("tidyverse")
auto_install_dependencies(packages)
# load packages
library(tidyverse)
# data --------------------------------------------------------------------
setwd("~/git/plotting-and-visualisation-templates/")
# there are several ways to pull data in here.
# 1. generate fake data to demonstrate the required structure of the data frame
# conform to this structure of group, trial type, D scores, errors.
# NB trial types are named further below
data_to_plot <- data.frame(Group = factor(c("Men", "Men", "Men", "Men", "Women", "Women", "Women", "Women")),
trialtype = factor(c(1, 2, 3, 4, 1, 2, 3, 4)),
mean_D1 = c(0.1, 0.5, 0.3, 0.4, 0.4, 0.3, 0.6, 0.2),
errors_D1 = c(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3))  # could be SE or 95% CI (preferable)
# you can view this data so that you can see the required structure
#View(data_to_plot)
# or write this data to disk so that you can see the required data structure.
#write.csv(data_to_plot, file = "~/Desktop/demo_data.csv")  # Mac OS
#write.csv(data_to_plot, file = file = "c:/mydocuments/Desktop/demo_data.csv")  # windows
# 2. assuming you can calculate means and errors (SE or CI widths) from your data,
# you can put these in csv file that conforms to the above format and read them in here.
#data_to_plot <- read.csv("~/Desktop/demo_data.csv")  # Mac OS
#data_to_plot <- read.csv("c:/mydocuments/Desktop/demo_data.csv")  # windows
# 3. read in your participant level data, and the below will extract the group, means and CI widths
# and put them in the right format.
# NB you must include a group identifier column (currently "gender" below), D_tt1, D_tt2, D_tt3, D_tt4
# and an outlier column
#input_data <- read.csv("~/Desktop/demo_data.csv")  # Mac OS
#input_data <- read.csv("c:/mydocuments/Desktop/demo_data.csv")  # windows
#
# data_to_plot_1 <-
#   input_data %>%
#   rename(Group = gender) %>%  # set your grouping variable here
#   filter(!is.na(D_tt1) | !is.na(D_tt2) | !is.na(D_tt3) | !is.na(D_tt1) | !is.na(Group)) %>%  # remove rows with missing data
#   group_by(Group) %>%
#   summarize(mean_D_tt1 = mean(D_tt1),
#             mean_D_tt2 = mean(D_tt2),
#             mean_D_tt3 = mean(D_tt3),
#             mean_D_tt4 = mean(D_tt4)) %>%
#   gather(trialtype, mean_D1, c(mean_D_tt1, mean_D_tt2, mean_D_tt3, mean_D_tt4)) %>%
#   mutate(trialtype = ifelse(trialtype == "mean_D_tt1", 1,
#                             ifelse(trialtype == "mean_D_tt2", 2,
#                                    ifelse(trialtype == "mean_D_tt3", 3,
#                                           ifelse(trialtype == "mean_D_tt4", 4, NA))))) %>%
#   rownames_to_column()
#
# data_to_plot_2 <-
#   input_data %>%
#   rename(Group = gender) %>%
#   filter(!is.na(D_tt1) | !is.na(D_tt2) | !is.na(D_tt3) | !is.na(D_tt1) | !is.na(Group)) %>%  # remove rows with missing data
#   group_by(Group) %>%
#   summarize(se_D_tt1 = 1.96*sd(D_tt1)/sqrt(length(D_tt1)),  # returns 95% CI interval width. Remove "1.96*" for standard error
#             se_D_tt2 = 1.96*sd(D_tt2)/sqrt(length(D_tt2)),
#             se_D_tt3 = 1.96*sd(D_tt3)/sqrt(length(D_tt3)),
#             se_D_tt4 = 1.96*sd(D_tt4)/sqrt(length(D_tt4))) %>%
#   gather(trialtype, errors_D1, c(se_D_tt1, se_D_tt2, se_D_tt3, se_D_tt4)) %>%
#   select(-trialtype, -Group) %>%
#   rownames_to_column()
#
# data_to_plot <-
#   left_join(data_to_plot_1, data_to_plot_2, by = "rowname") %>%
#   select(-rowname) %>%
#   mutate(trialtype = as.factor(trialtype))
# optinally define strict apa theme ---------------------------------------
# nb not employed in plot below by default
# apatheme <-
#   theme_bw()+
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.border = element_blank(),
#         axis.line = element_line(),
#         text = element_text(family = "Times New Roman"),
#         legend.title = element_blank())
# plot --------------------------------------------------------------------
# define error bar limits
limits <- aes(ymax = mean_D1 + errors_D1, ymin = mean_D1 - errors_D1)
# "dodge" the error bars so they don't overlap
dodge <- position_dodge(width = 0.4)
# create plot
ggplot(data_to_plot,
aes(colour = Group,
y = mean_D1,
x = trialtype)) +
ylim(-.5, 1) +  # set limits of Y axis here
geom_point(shape = 15,  # squares for points
position = dodge) +
geom_errorbar(limits,
width = 0.3,
position = dodge) +
theme_classic() +  # employs a sans serif font. If you want stict APA format, comment out this line and uncomment apatheme below.
#apatheme +
scale_color_grey() +  # greyscale colours
ylab(expression("Mean " ~ italic("D")[IRAP] ~ "scores")) +  # use some expressions magic to include subscript and italics
scale_x_discrete("Trial type",
labels=c("1" = "men\nmaculine",  # Name trial types here. NB "\n" creates a new line so that captions are readable
"2" = "men\nfeminine",
"3" = "women\nmasculine",
"4" = "women\nfeminine"))
# save plot to disk
ggsave("IRAP trial type plot.pdf",
#path = "c:/mydocuments/Desktop/"  # windows
device = "pdf",  # saves a PDF that is sized to fit Elsevier's 1.5 column width standard, ready for submission.
width = 14,
height = 8,
units = "cm")
ggsave("Point and error bar plot.pdf",
#path = "c:/mydocuments/Desktop/"  # windows
device = "pdf",  # saves a PDF that is sized to fit Elsevier's 1.5 column width standard, ready for submission.
width = 14,
height = 8,
units = "cm")
# title: plot
# autor: Ian Hussey (Ian.Hussey@ugent.be)
# license: GPLv3+
# dependencies ------------------------------------------------------------
library(tidyverse)
# get data ----------------------------------------------------------------
setwd("/Users/Ian/Dropbox/Work/Projects/Aoife collaborations/Aoife and Ian's Shared Folder/Reprocessed D scores from raw RTs/")
output_data <- read.csv("4 calculate D scores/Communality agency stereotype IRAP processed.csv")
# reshape data for plotting -----------------------------------------------
data_to_plot_1 <-
output_data %>%
rename(Group = gender) %>%  # set grouping variable here
group_by(Group) %>%
summarize(mean_D_tt1 = mean(D_tt1),
mean_D_tt2 = mean(D_tt2),
mean_D_tt3 = mean(D_tt3),
mean_D_tt4 = mean(D_tt4)) %>%
gather(trialtype, mean_D1, c(mean_D_tt1, mean_D_tt2, mean_D_tt3, mean_D_tt4)) %>%
mutate(trialtype = ifelse(trialtype == "mean_D_tt1", 1,
ifelse(trialtype == "mean_D_tt2", 2,
ifelse(trialtype == "mean_D_tt3", 3,
ifelse(trialtype == "mean_D_tt4", 4, NA))))) %>%
rownames_to_column()
data_to_plot_2 <-
output_data %>%
rename(Group = gender) %>%  # set grouping variable here
group_by(Group) %>%
summarize(se_D_tt1 = 1.96*sd(D_tt1, na.rm = TRUE)/sqrt(length(D_tt1)),  # returns 95% CI interval width. Remove "1.96*" for standard error
se_D_tt2 = 1.96*sd(D_tt2, na.rm = TRUE)/sqrt(length(D_tt2)),
se_D_tt3 = 1.96*sd(D_tt3, na.rm = TRUE)/sqrt(length(D_tt3)),
se_D_tt4 = 1.96*sd(D_tt4, na.rm = TRUE)/sqrt(length(D_tt4))) %>%
gather(trialtype, errors_D1, c(se_D_tt1, se_D_tt2, se_D_tt3, se_D_tt4)) %>%
select(-trialtype, -Group) %>%
rownames_to_column()
data_to_plot <-
left_join(data_to_plot_1, data_to_plot_2, by = "rowname") %>%
select(-rowname) %>%
mutate(mean_D1 = round(mean_D1, 3),
errors_D1 = round(errors_D1, 3),
trialtype = as.factor(trialtype))
# plot --------------------------------------------------------------------
# define error bar limits
limits <- aes(ymax = mean_D1 + errors_D1, ymin = mean_D1 - errors_D1)
# "dodge" the error bars so they don't overlap
dodge <- position_dodge(width = 0.4)
# create plot
ggplot(data_to_plot,
aes(y = mean_D1,
x = trialtype)) +
#ylim(-1.5, 1.5) +
geom_point(shape = 15) +   # black square
geom_errorbar(limits,
width = 0.3) +
theme_classic() +  # employs a sans serif font. If you want stict APA format, comment out this line and uncomment apatheme below.
scale_color_grey() +  # greyscale colours
ylab(expression("Mean " ~ italic("D")[IRAP])) +   # use some expressions magic to include subscript and italics
scale_x_discrete("Trial type",
labels = c("1" = "men are\nmasculine",
"2" = "men are\nfeminine",
"3" = "women are\nmasculine",
"4" = "women are\nfemenine"))
# save plot to disk
ggsave("5 plots/plot Communality agency stereotype IRAP.pdf",
device = "pdf",  # saves a PDF that is sized to fit Elsevier's 1.5 column width standard, ready for submission.
width = 14,
height = 9,
units = "cm")
# Simple point and error bar plot of mean D-IRAP scores
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# notes:
#   No bars as these sublty but falsely imply that deviation from zero is interpretable or meaningful.
#   No lines between groups as these can subtly but falsy imply that the groups are paired.
# instructions:
#   Change your group names, mean D1 scores, and error bar width on lines 38, 40 and 41.
#   Or, put these in a csv file and load them here using lines 51-52. You can see the required structure on the preceeding lines.
#   Change your trial type names on line 92-95.
#   Depending on whether you're working from mac or pc, comment/comment lines 99/100.
# dependencies ------------------------------------------------------------
# check for all dependencies and install any missing ones
# solution from https://gist.github.com/stevenworthington/3178163
auto_install_dependencies <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
}
packages <- c("tidyverse")
auto_install_dependencies(packages)
# load packages
library(tidyverse)
# data --------------------------------------------------------------------
setwd("~/git/plotting-and-visualisation-templates/")
# there are several ways to pull data in here.
# 1. generate fake data to demonstrate the required structure of the data frame
# conform to this structure of group, trial type, D scores, errors.
# NB trial types are named further below
data_to_plot <- data.frame(Group = factor(c("Men", "Men", "Men", "Men", "Women", "Women", "Women", "Women")),
trialtype = factor(c(1, 2, 3, 4, 1, 2, 3, 4)),
mean_D1 = c(0.1, 0.5, 0.3, 0.4, 0.4, 0.3, 0.6, 0.2),
errors_D1 = c(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3))  # could be SE or 95% CI (preferable)
# you can view this data so that you can see the required structure
#View(data_to_plot)
# or write this data to disk so that you can see the required data structure.
#write.csv(data_to_plot, file = "~/Desktop/demo_data.csv")  # Mac OS
#write.csv(data_to_plot, file = file = "c:/mydocuments/Desktop/demo_data.csv")  # windows
# 2. assuming you can calculate means and errors (SE or CI widths) from your data,
# you can put these in csv file that conforms to the above format and read them in here.
#data_to_plot <- read.csv("~/Desktop/demo_data.csv")  # Mac OS
#data_to_plot <- read.csv("c:/mydocuments/Desktop/demo_data.csv")  # windows
# 3. read in your participant level data, and the below will extract the group, means and CI widths
# and put them in the right format.
# NB you must include a group identifier column (currently "gender" below), D_tt1, D_tt2, D_tt3, D_tt4
# and an outlier column
#input_data <- read.csv("~/Desktop/demo_data.csv")  # Mac OS
#input_data <- read.csv("c:/mydocuments/Desktop/demo_data.csv")  # windows
#
# data_to_plot_1 <-
#   input_data %>%
#   rename(Group = gender) %>%  # set your grouping variable here
#   filter(!is.na(D_tt1) | !is.na(D_tt2) | !is.na(D_tt3) | !is.na(D_tt1) | !is.na(Group)) %>%  # remove rows with missing data
#   group_by(Group) %>%
#   summarize(mean_D_tt1 = mean(D_tt1),
#             mean_D_tt2 = mean(D_tt2),
#             mean_D_tt3 = mean(D_tt3),
#             mean_D_tt4 = mean(D_tt4)) %>%
#   gather(trialtype, mean_D1, c(mean_D_tt1, mean_D_tt2, mean_D_tt3, mean_D_tt4)) %>%
#   mutate(trialtype = ifelse(trialtype == "mean_D_tt1", 1,
#                             ifelse(trialtype == "mean_D_tt2", 2,
#                                    ifelse(trialtype == "mean_D_tt3", 3,
#                                           ifelse(trialtype == "mean_D_tt4", 4, NA))))) %>%
#   rownames_to_column()
#
# data_to_plot_2 <-
#   input_data %>%
#   rename(Group = gender) %>%
#   filter(!is.na(D_tt1) | !is.na(D_tt2) | !is.na(D_tt3) | !is.na(D_tt1) | !is.na(Group)) %>%  # remove rows with missing data
#   group_by(Group) %>%
#   summarize(se_D_tt1 = 1.96*sd(D_tt1)/sqrt(length(D_tt1)),  # returns 95% CI interval width. Remove "1.96*" for standard error
#             se_D_tt2 = 1.96*sd(D_tt2)/sqrt(length(D_tt2)),
#             se_D_tt3 = 1.96*sd(D_tt3)/sqrt(length(D_tt3)),
#             se_D_tt4 = 1.96*sd(D_tt4)/sqrt(length(D_tt4))) %>%
#   gather(trialtype, errors_D1, c(se_D_tt1, se_D_tt2, se_D_tt3, se_D_tt4)) %>%
#   select(-trialtype, -Group) %>%
#   rownames_to_column()
#
# data_to_plot <-
#   left_join(data_to_plot_1, data_to_plot_2, by = "rowname") %>%
#   select(-rowname) %>%
#   mutate(trialtype = as.factor(trialtype))
# optinally define strict apa theme ---------------------------------------
# nb not employed in plot below by default
# apatheme <-
#   theme_bw()+
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.border = element_blank(),
#         axis.line = element_line(),
#         text = element_text(family = "Times New Roman"),
#         legend.title = element_blank())
# plot --------------------------------------------------------------------
# define error bar limits
limits <- aes(ymax = mean_D1 + errors_D1, ymin = mean_D1 - errors_D1)
# "dodge" the error bars so they don't overlap
dodge <- position_dodge(width = 0.4)
# create plot
ggplot(data_to_plot,
aes(colour = Group,
y = mean_D1,
x = trialtype)) +
ylim(-.5, 1) +  # set limits of Y axis here
geom_point(shape = 15,  # squares for points
position = dodge) +
geom_errorbar(limits,
width = 0.3,
position = dodge) +
theme_classic() +  # employs a sans serif font. If you want stict APA format, comment out this line and uncomment apatheme below.
#apatheme +
scale_color_grey() +  # greyscale colours
ylab(expression("Mean " ~ italic("D")[IRAP] ~ "scores")) +  # use some expressions magic to include subscript and italics
scale_x_discrete("Trial type",
labels=c("1" = "men are\nmaculine",  # Name trial types here. NB "\n" creates a new line so that captions are readable
"2" = "men are\nfeminine",
"3" = "women are\nmasculine",
"4" = "women are\nfeminine"))
# save plot to disk
ggsave("Point and error bar plot.pdf",
#path = "c:/mydocuments/Desktop/"  # windows
device = "pdf",  # saves a PDF that is sized to fit Elsevier's 1.5 column width standard, ready for submission.
width = 14,
height = 8,
units = "cm")
# CubeHelix colour palette R implementation
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# notes: the CubeHelix palette has the advantage of being equally visable when
# viewed in black and white or in colour. It is also color blind friendly, and
# aesthetically pleasing relative to most default colour palettes.
# dependencies ------------------------------------------------------------
library(rje) #implementation of cubehelix
# generate hex colour codes -----------------------------------------------
# generically:
# cubeHelix(n, start = 0, r = .1, hue = 1, gamma = 1) #where n is number of colors desired
# 4 color palettes based on variation in start and r
#1
colors <- cubeHelix(7, start = 0, r = 1, hue = 1, gamma = 1)
colors
# "#451A3C" "#834339" "#848941" "#80C48E" "#B8E0E6"
#2
colors <- cubeHelix(7, start = 0, r = -1, hue = 1, gamma = 1)
# "#0E363C" "#2B6F39" "#848941" "#D8988E" "#EFC4E6"
#3
colors <- cubeHelix(7, start = -.5, r = -1, hue = 1, gamma = 1)
colors
# "#103B19" "#595D1D" "#B36B60" "#D490C6" "#D2CFF7"
#4
colors <- cubeHelix(7, start = .5, r = 1, hue = 1, gamma = 1)
colors
# "#471F19" "#595D1D" "#519D60" "#7CBCC6" "#D2CFF7"
#5
colors <- cubeHelix(5, start = .5, r = 1, hue = 1, gamma = 1)
colors
# "#000000" "#583B17" "#519D60" "#A7C4E8" "#FFFFFF"
# Easy Gantt charts
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# dependencies ------------------------------------------------------------
library(plan)
# Option 1 ----------------------------------------------------------------
# simply plot a preformulated list of dates
# This requires less code but more manual labor making and formatting the file.
# NB the txt file must be both comma and tab spaced for some reason.
setwd("~/Dropbox/Work/Programming/R/3 Visualisation/Gantt charts/")
gantt_chart_1 <- read.gantt("Gantt demo data.txt")
plot(gantt_chart_1)
# Option 2 ----------------------------------------------------------------
# Calculate dates based on a start date plus time required
# This requires more code but can be adjusted and updated more quickly
## define vectors for each datum to be plotted
# define what we mean by months and years. These don't need to be changed.
month <- 28 * 86400 # define a month in seconds
year <- 12 * month # define a year in seconds
# set project start date
arrive <- as.POSIXct("2016-04-04")
# calculate project end date
leave <- arrive + 4 * year
# define start dates and required time for each of the tasks
# NB these can work backwards from and end date as well as forwards from the start. e.g., T1 vs T7
startT1 <- arrive
endT1 <- startT1 + month * 4
startT2 <- endT1 + 1
endT2 <- startT2 + month * 4
startT3 <- arrive + month * 12
endT3 <- startT3 + month * 4
startT4 <- arrive + month * 9
endT4 <- arrive + month * 12
startT5 <- arrive + month * 15
endT5 <- arrive + month * 20
startT6 <- arrive + month * 2
endT6 <- leave - month * 4
startT7 <- leave - month * 4
endT7 <- leave
# convert the above vectors in to Plan's gantt format list
gantt_chart_2 <- as.gantt(key = 1:7,
description=c("Term 1 classes",
"Term 2 classes",
"Qualifying Examination",
"Term 3 classes",
"Proposal Defence",
"Thesis Work",
"Thesis Writing/Defence"),
start=c(startT1,
startT2,
startT3,
startT4,
startT5,
startT6,
startT7),
end=c(endT1,
endT2,
endT3,
endT4,
endT5,
endT6,
endT7),
done = rep(0, 7), # set done % to "0" for all seven rows. Equivalent to c(0,0,0,0,0,0,0)
neededBy = c(NA,NA,NA,NA,NA,7,NA)) # draw "needed by" lines between the end the row and what other row
# plot
plot(gantt_chart_2, xlim = c(arrive, leave))
# RDI plots (raw data, distribution and inferential information)
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# Dependencies ------------------------------------------------------------
library(tidyverse)
library(yarrr)
# Data acquisition and processing -----------------------------------------
setwd("~/Dropbox/Work/Programming/R/3 Visualisation/Pirate plot/")
IAT_data_exp <-
read.csv("RDI demo data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "congruent", "incongruent"),
block = as.factor(block),
condition = as.factor(ifelse(condition == 1, "low", "high")))
IAT_data_exp_outliers_removed <-
IAT_data_exp %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
# plot --------------------------------------------------------------------
RDI_plot <-
pirateplot(formula = rt ~ condition * block,
data = IAT_data_exp_outliers_removed,
main = "IAT data",
ylab = "Reaction times",
theme = 1,
pal = "#526273",
bean.b.o = 1,
point.o = .2,
bar.o = 1,
line.o = 1,
inf.f.o = 1,
inf = "ci",
inf.f.col = c("#834339", "#80C48E"),
bean.f.col = c("#834339", "#80C48E"),
ylim = c (200, 1200))
RDI_plot <-
pirateplot(formula = rt ~ condition * block,
data = IAT_data_exp_outliers_removed,
main = "IAT data",
ylab = "Reaction times",
theme = 1,
pal = "#526273",
bean.b.o = 1,
point.o = .2,
bar.o = 1,
line.o = 1,
inf.f.o = 1,
inf = "ci",
inf.f.col = c("#834339", "#80C48E"),
bean.f.col = c("#834339", "#80C48E"),
ylim = c (200, 1200))
# RDI plots (raw data, distribution and inferential information)
# author: Ian Hussey (ian.hussey@ugent.be)
# license: GPLv3+
# Dependencies ------------------------------------------------------------
library(tidyverse)
library(yarrr)
# Data acquisition and processing -----------------------------------------
setwd("~/Dropbox/Work/Programming/R/3 Visualisation/Pirate plot/")
IAT_data_exp <-
read.csv("RDI demo data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "congruent", "incongruent"),
block = as.factor(block),
condition = as.factor(ifelse(condition == 1, "low", "high")))
IAT_data_exp_outliers_removed <-
IAT_data_exp %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
# plot --------------------------------------------------------------------
RDI_plot <-
pirateplot(formula = rt ~ condition * block,
data = IAT_data_exp_outliers_removed,
main = "IAT data",
ylab = "Reaction times",
theme = 1,
pal = "#526273",
bean.b.o = 1,
point.o = .2,
bar.o = 1,
line.o = 1,
inf.f.o = 1,
inf = "ci",
inf.f.col = c("#834339", "#80C48E"),
bean.f.col = c("#834339", "#80C48E"),
ylim = c (200, 1200))
